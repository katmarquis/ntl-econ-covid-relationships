# -*- coding: utf-8 -*-
"""Data Collection and Preprocessing - Nighttime Light and Geospatial Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FcyxHGGftb9CI8rMLrXLYFcyV-Xasiei

https://worldbank.github.io/OpenNightLights/tutorials/mod3_2_image_clipping_with_VIIRS.html
"""

!pip install geemap

import pandas as pd
import numpy as np
import ee
import geemap

from google.colab import drive
from google.colab import files
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Undergrad/Junior Summer/SURF/data/"

try:
        ee.Initialize()
except Exception as e:
        ee.Authenticate()
        ee.Initialize()

"""## 2020-2023 NTL Data"""

dataset = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG').filter(ee.Filter.date('2020-01-01', '2023-03-31'))
print(dataset.size().getInfo())

county_data = ee.FeatureCollection('TIGER/2018/Counties')
print(county_data.size().getInfo())

"""### Images"""

# map United States

map = geemap.Map(center=[40, -100], zoom=4)
map.add_basemap('SATELLITE')
map.addLayer(dataset.first().select("avg_rad"), {})
#map.addLayer(county_data)
map.addLayerControl()
map

# map Los Angeles 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "06037")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[34.0469,-118.2541], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Los Angeles 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "06037")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map2 = geemap.Map(center=[34.0469,-118.2541], zoom=8)
map2.add_basemap('SATELLITE')
map2.addLayer(aoi)
map2.addLayer(img.select("avg_rad"), {})
map2.addLayerControl()
map2

# map Monterey 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "06053")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[36.6002,-121.8947], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Monterey 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "06053")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[36.6002,-121.8947], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Chicago 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "17031")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[41.8781,-87.6298], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Chicago 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "17031")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[41.8781,-87.6298], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map DeKalb 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "17037")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[41.9295,-88.7499], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map DeKalb 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "17037")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[41.9295,-88.7499], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Houston 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "48201")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[29.7604,-95.3698], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Houston 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "48201")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[29.7604,-95.3698], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Hardin 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "48199")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[30.1524,-94.7391], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Hardin 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "48199")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[30.1524,-94.7391], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Pheonix 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "04013")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[33.4484,-112.0740], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map Pheonix 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "04013")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[33.4484,-112.0740], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map La Paz 01/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "04012")).geometry()
img = dataset.filterDate("2020-01-01").first().clip(aoi)

map = geemap.Map(center=[34.0061,-113.9536], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

# map La Paz 05/2020

aoi = county_data.filter(ee.Filter.eq('GEOID', "04012")).geometry()
img = dataset.filterDate("2020-05-01").first().clip(aoi)

map = geemap.Map(center=[34.0061,-113.9536], zoom=8)
map.add_basemap('SATELLITE')
map.addLayer(aoi)
map.addLayer(img.select("avg_rad"), {})
map.addLayerControl()
map

"""### Numerical Data"""

# get counties to use

counties = pd.read_csv(path + "counties_to_use.csv",index_col=0)
fips = counties["CountyFIPS"].tolist()
counties.head()

def fix_code(fips_code):
  string_code = str(fips_code)
  if len(string_code) == 4:
    string_code = "0" + string_code
  return string_code

"""#### Collect Raw Data"""

def aoi_mean(img):
    mean = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('mean',mean)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_mean)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','mean']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','mean'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 39
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "ntl_df_means.csv")


def aoi_std_dev(img):
    std_dev = img.reduceRegion(reducer=ee.Reducer.stdDev(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('std_dev',std_dev)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_std_dev)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','std_dev']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','std_dev'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 39
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "ntl_df_std_dev.csv")


def aoi_sol(img):
    sol = img.reduceRegion(reducer=ee.Reducer.sum(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('sol',sol)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_sol)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','sol']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','sol'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 39
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "ntl_df_sol.csv")

"""#### Collect Standardized Data (0 Mean and Unit Variance)"""

ntl_data = pd.read_csv(path + "ntl_data.csv",index_col=0)

fips_set = set(ntl_data["FIPS"].tolist())

def aoi_standard_sol(img):
    avg = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=aoi)
    dev = img.reduceRegion(reducer=ee.Reducer.stdDev(), geometry=aoi)
    mu = ee.Number(avg.get('avg_rad'))
    std = ee.Number(dev.get('avg_rad'))
    new_im = img.subtract(mu).divide(std)
    sol = new_im.reduceRegion(reducer=ee.Reducer.sum(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('sol_stand',sol)

ntl_df = pd.DataFrame()

for code in fips_set:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_standard_sol)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','sol_stand']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','sol_stand'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 39
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "ntl_df_sol_stand.csv")

"""#### Combine Data"""

means_df = pd.read_csv(path + "ntl_df_means.csv",index_col=0)
std_dev_df = pd.read_csv(path + "ntl_df_std_dev.csv",index_col=0)
sol_df = pd.read_csv(path + "ntl_df_sol.csv",index_col=0)
std_sol_df = pd.read_csv(path + "ntl_df_sol_stand.csv",index_col=0)

std_sol_df.head()

sol_df.head()

means_df.head()

std_dev_df.head()

dates = set(means_df.index.tolist())

means_lst = []
devs_lst = []
sums_lst = []
stand_sums = []
dates_lst = []
fips_lst = []

for code in fips:
  temp_means = means_df[means_df["FIPS"] == code]
  temp_dev = std_dev_df[std_dev_df["FIPS"] == code]
  temp_sol = sol_df[sol_df["FIPS"] == code]
  temp_stand = std_sol_df[std_sol_df["FIPS"] == code]
  for date in dates:
    m = temp_means.loc[date]["mean"]
    d = temp_dev.loc[date]["std_dev"]
    s = temp_sol.loc[date]["sol"]
    ss = temp_stand.loc[date]["sol_stand"]
    means_lst.append(m)
    devs_lst.append(d)
    sums_lst.append(s)
    stand_sums.append(ss)
    dates_lst.append(date)
    fips_lst.append(code)

ntl_data = pd.DataFrame({"Date": dates_lst, "FIPS": fips_lst, "Mean": means_lst, "Std_Dev": devs_lst, "Sum_of_Lights": sums_lst, "Standard_SoL": stand_sums})
ntl_data.to_csv(path + "ntl_data.csv")
ntl_data.head()

"""## 2018-2020 NTL Data"""

dataset = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG').filter(ee.Filter.date('2018-01-01', '2020-12-31'))
print(dataset.size().getInfo())

county_data = ee.FeatureCollection('TIGER/2018/Counties')
print(county_data.size().getInfo())

counties = pd.read_csv(path + "counties_to_use.csv",index_col=0)
fips = counties["CountyFIPS"].tolist()

def fix_code(fips_code):
  string_code = str(fips_code)
  if len(string_code) == 4:
    string_code = "0" + string_code
  return string_code


def aoi_mean(img):
    mean = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('mean',mean)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_mean)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','mean']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','mean'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 36
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "past_ntl_df_means.csv")


def aoi_std_dev(img):
    std_dev = img.reduceRegion(reducer=ee.Reducer.stdDev(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('std_dev',std_dev)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_std_dev)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','std_dev']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','std_dev'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 36
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "past_ntl_df_std_dev.csv")


def aoi_sol(img):
    sol = img.reduceRegion(reducer=ee.Reducer.sum(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('sol',sol)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_sol)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','sol']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','sol'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 36
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "past_ntl_df_sol.csv")


def aoi_standard_sol(img):
    avg = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=aoi)
    dev = img.reduceRegion(reducer=ee.Reducer.stdDev(), geometry=aoi)
    mu = ee.Number(avg.get('avg_rad'))
    std = ee.Number(dev.get('avg_rad'))
    new_im = img.subtract(mu).divide(std)
    sol = new_im.reduceRegion(reducer=ee.Reducer.sum(), geometry=aoi).get('avg_rad')
    return img.set('date', img.date().format()).set('sol_stand',sol)

ntl_df = pd.DataFrame()

for code in fips:
  geoid = fix_code(code)
  aoi = county_data.filter(ee.Filter.eq('GEOID', geoid)).geometry()
  aoi_reduced_imgs = dataset.map(aoi_standard_sol)
  nested_list = aoi_reduced_imgs.reduceColumns(ee.Reducer.toList(2), ['date','sol_stand']).values().get(0)
  df = pd.DataFrame(nested_list.getInfo(), columns=['date','sol_stand'])
  df['date'] = pd.to_datetime(df['date'])
  df = df.set_index('date')
  fips_lst = [code] * 36
  df["FIPS"] = fips_lst
  ntl_df = pd.concat([ntl_df, df])

ntl_df.to_csv(path + "past_ntl_df_sol_stand.csv")

means_df = pd.read_csv(path + "past_ntl_df_means.csv",index_col=0)
std_dev_df = pd.read_csv(path + "past_ntl_df_std_dev.csv",index_col=0)
sol_df = pd.read_csv(path + "past_ntl_df_sol.csv",index_col=0)
stand_df = pd.read_csv(path + "past_ntl_df_sol_stand.csv",index_col=0)

dates = set(means_df.index.tolist())

means_lst = []
devs_lst = []
sums_lst = []
stands = []
dates_lst = []
fips_lst = []

for code in fips:
  temp_means = means_df[means_df["FIPS"] == code]
  temp_dev = std_dev_df[std_dev_df["FIPS"] == code]
  temp_sol = sol_df[sol_df["FIPS"] == code]
  temp_stand = stand_df[stand_df["FIPS"] == code]
  for date in dates:
    m = temp_means.loc[date]["mean"]
    d = temp_dev.loc[date]["std_dev"]
    s = temp_sol.loc[date]["sol"]
    ss = temp_stand.loc[date]["sol_stand"]
    means_lst.append(m)
    devs_lst.append(d)
    sums_lst.append(s)
    stands.append(ss)
    dates_lst.append(date)
    fips_lst.append(code)

ntl_data = pd.DataFrame({"Date": dates_lst, "FIPS": fips_lst, "Mean": means_lst, "Std_Dev": devs_lst, "Sum_of_Lights": sums_lst, "Standard_SoL": stands})
ntl_data.to_csv(path + "past_ntl_data.csv")
ntl_data.head()

"""## Geospatial County Data"""

data = ee.FeatureCollection('TIGER/2018/Counties')

def fix_code(fips_code):
  string_code = str(fips_code)
  if len(string_code) == 4:
    string_code = "0" + string_code
  return string_code

counties_df = pd.read_csv(path + "counties_to_use.csv", index_col=0)
counties_lst = counties_df["CountyFIPS"].tolist()
fips_lst = []
for fips in counties_lst:
  fips_lst.append(fix_code(fips))

land = []
for fips in fips_lst:
  aoi = data.filter(ee.Filter.eq('GEOID', fips)).first()
  l = aoi.get("ALAND").getInfo()
  land.append(l)

df = pd.DataFrame()
df["County"] = counties_lst
df["Land_Area"] = land

df.head()

df.to_csv(path + "county_area.csv")