# -*- coding: utf-8 -*-
"""County Classifications and Trend Visualizations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xIjkRzOpVw8VpYHiX7xZMAbM9XdP-vOo
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
from google.colab import files
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Undergrad/Junior Summer/SURF/data/"

data = pd.read_csv(path + "data_final.csv", index_col = 0)
data.head()

past_data = pd.read_csv(path + "past_ntl_data.csv",index_col = 0)

months = []
years = []

for row in past_data.itertuples():
  date = row.Date
  date_lst = date.split("-")
  months.append(float(date_lst[1]))
  years.append(float(date_lst[0]))

past_data["Month"] = months
past_data["Year"] = years

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Incidence_Rate"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Incidence_Rate"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Incidence_Rate"] > cutoffs[float(1/3)]) & (temp_data["Incidence_Rate"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Incidence_Rate"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

plt.subplot(3,1,1)
plt.plot(dates, ntl_l, label="Covid")
plt.plot(dates, ntl_l_18, label="2018")
plt.plot(dates, ntl_l_19, label="2019")
plt.legend()
plt.xticks([])
plt.ylabel('SOL')
plt.title('Low Counties')

plt.subplot(3,1,2)
plt.plot(dates, ntl_m)
plt.plot(dates, ntl_m_18)
plt.plot(dates, ntl_m_19)
plt.xticks([])
plt.ylabel('SOL')
plt.title('Medium Counties')

plt.subplot(3,1,3)
plt.plot(dates, ntl_h)
plt.plot(dates, ntl_h_18)
plt.plot(dates, ntl_h_19)
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('SOL')
plt.title('High Counties')

plt.suptitle('Sum of Lights (SOL) vs. Time for Counties Divided into Thirds Based on Incidence Rate')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Incidence_Rate"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Incidence_Rate"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Incidence_Rate"] > cutoffs[float(1/3)]) & (temp_data["Incidence_Rate"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Incidence_Rate"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_l = []
result_m = []
result_h = []
for i in range(len(ntl_l)):
    result_l.append(ntl_l[i] - (ntl_l_18[i] + ntl_l_19[i])/2)
    result_m.append(ntl_m[i] - (ntl_m_18[i] + ntl_m_19[i])/2)
    result_h.append(ntl_h[i] - (ntl_h_18[i] + ntl_h_19[i])/2)

plt.plot(dates, result_l, label="Low")
plt.plot(dates, result_m, label="Medium")
plt.plot(dates, result_h, label="High")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Sum of Lights')

plt.title('Sum of Lights vs. Time for Counties Divided into Thirds Based on Incidence Rate')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

plt.subplot(3,1,1)
plt.plot(dates, ntl_l, label="Covid")
plt.plot(dates, ntl_l_18, label="2018")
plt.plot(dates, ntl_l_19, label="2019")
plt.legend()
plt.xticks([])
plt.ylabel('SOL')
plt.title('Low Counties')

plt.subplot(3,1,2)
plt.plot(dates, ntl_m)
plt.plot(dates, ntl_m_18)
plt.plot(dates, ntl_m_19)
plt.xticks([])
plt.ylabel('SOL')
plt.title('Medium Counties')

plt.subplot(3,1,3)
plt.plot(dates, ntl_h)
plt.plot(dates, ntl_h_18)
plt.plot(dates, ntl_h_19)
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('SOL')
plt.title('High Counties')

plt.suptitle('Sum of Lights (SOL) vs. Time for Counties Divided into Thirds Based on Monthly Cases')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_l = []
result_m = []
result_h = []
for i in range(len(ntl_l)):
    result_l.append(ntl_l[i] - (ntl_l_18[i] + ntl_l_19[i])/2)
    result_m.append(ntl_m[i] - (ntl_m_18[i] + ntl_m_19[i])/2)
    result_h.append(ntl_h[i] - (ntl_h_18[i] + ntl_h_19[i])/2)

plt.plot(dates, result_l, label="Low")
plt.plot(dates, result_m, label="Medium")
plt.plot(dates, result_h, label="High")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Sum of Lights')

plt.title('Sum of Lights vs. Time for Counties Divided into Thirds Based on Monthly Cases')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Total_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Total_Cases"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Total_Cases"] > cutoffs[float(1/3)]) & (temp_data["Total_Cases"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Total_Cases"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

plt.subplot(3,1,1)
plt.plot(dates, ntl_l, label="Covid")
plt.plot(dates, ntl_l_18, label="2018")
plt.plot(dates, ntl_l_19, label="2019")
plt.legend()
plt.xticks([])
plt.ylabel('SOL')
plt.title('Low Counties')

plt.subplot(3,1,2)
plt.plot(dates, ntl_m)
plt.plot(dates, ntl_m_18)
plt.plot(dates, ntl_m_19)
plt.xticks([])
plt.ylabel('SOL')
plt.title('Medium Counties')

plt.subplot(3,1,3)
plt.plot(dates, ntl_h)
plt.plot(dates, ntl_h_18)
plt.plot(dates, ntl_h_19)
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('SOL')
plt.title('High Counties')

plt.suptitle('Sum of Lights (SOL) vs. Time for Counties Divided into Thirds Based on Total Cases')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Total_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Total_Cases"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Total_Cases"] > cutoffs[float(1/3)]) & (temp_data["Total_Cases"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Total_Cases"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_l = []
result_m = []
result_h = []
for i in range(len(ntl_l)):
    result_l.append(ntl_l[i] - (ntl_l_18[i] + ntl_l_19[i])/2)
    result_m.append(ntl_m[i] - (ntl_m_18[i] + ntl_m_19[i])/2)
    result_h.append(ntl_h[i] - (ntl_h_18[i] + ntl_h_19[i])/2)

plt.plot(dates, result_l, label="Low")
plt.plot(dates, result_m, label="Medium")
plt.plot(dates, result_h, label="High")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Sum of Lights')

plt.title('Sum of Lights vs. Time for Counties Divided into Thirds Based on Total Cases')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Population"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Population"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Population"] > cutoffs[float(1/3)]) & (temp_data["Population"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Population"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

plt.subplot(3,1,1)
plt.plot(dates, ntl_l, label="Covid")
plt.plot(dates, ntl_l_18, label="2018")
plt.plot(dates, ntl_l_19, label="2019")
plt.legend()
plt.xticks([])
plt.ylabel('SOL')
plt.title('Low Counties')

plt.subplot(3,1,2)
plt.plot(dates, ntl_m)
plt.plot(dates, ntl_m_18)
plt.plot(dates, ntl_m_19)
plt.xticks([])
plt.ylabel('SOL')
plt.title('Medium Counties')

plt.subplot(3,1,3)
plt.plot(dates, ntl_h)
plt.plot(dates, ntl_h_18)
plt.plot(dates, ntl_h_19)
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('SOL')
plt.title('High Counties')

plt.suptitle('Sum of Lights (SOL) vs. Time for Counties Divided into Thirds Based on Population')
plt.show()

dates = sorted(set(data['Date'].tolist()))

ntl_l_18 = []
ntl_m_18 = []
ntl_h_18 = []
ntl_l_19 = []
ntl_m_19 = []
ntl_h_19 = []
ntl_l = []
ntl_m = []
ntl_h = []

for date in dates:
  temp_data = data[data["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["Population"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["Population"] <= cutoffs[float(1/3)])]
  ntl_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["Population"] > cutoffs[float(1/3)]) & (temp_data["Population"] <= cutoffs[float(2/3)])]
  ntl_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["Population"] > cutoffs[float(2/3)])]
  ntl_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  ntl_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  ntl_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_l = []
result_m = []
result_h = []
for i in range(len(ntl_l)):
    result_l.append(ntl_l[i] - (ntl_l_18[i] + ntl_l_19[i])/2)
    result_m.append(ntl_m[i] - (ntl_m_18[i] + ntl_m_19[i])/2)
    result_h.append(ntl_h[i] - (ntl_h_18[i] + ntl_h_19[i])/2)

plt.plot(dates, result_l, label="Low")
plt.plot(dates, result_m, label="Medium")
plt.plot(dates, result_h, label="High")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Sum of Lights')

plt.title('Sum of Lights vs. Time for Counties Divided into Thirds Based on Population')
plt.show()

dates = sorted(set(data['Date'].tolist()))

u_l_18 = []
u_m_18 = []
u_h_18 = []
s_l_18 = []
s_m_18 = []
s_h_18 = []
r_l_18 = []
r_m_18 = []
r_h_18 = []
u_l_19 = []
u_m_19 = []
u_h_19 = []
s_l_19 = []
s_m_19 = []
s_h_19 = []
r_l_19 = []
r_m_19 = []
r_h_19 = []
u_l = []
u_m = []
u_h = []
s_l = []
s_m = []
s_h = []
r_l = []
r_m = []
r_h = []

# split into datasets for counties that are urban, semi-urban, and rural
s = data["Population"]
pop_cutoffs = s.quantile([float(1/3), float(2/3)])
data_rural = data[(data["Population"] <= pop_cutoffs[float(1/3)])]
data_semi = data[(data["Population"] > pop_cutoffs[float(1/3)]) & (data["Population"] <= pop_cutoffs[float(2/3)])]
data_urban = data[(data["Population"] > pop_cutoffs[float(2/3)])]

# classify by covid level in each month
for date in dates:

  # rural counties
  temp_data = data_rural[data_rural["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  r_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  r_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  r_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  # semi-urban counties
  temp_data = data_semi[data_semi["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  s_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  s_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  s_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  # urban counties
  temp_data = data_urban[data_urban["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  u_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  u_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  u_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_u_l = []
result_u_m = []
result_u_h = []
result_s_l = []
result_s_m = []
result_s_h = []
result_r_l = []
result_r_m = []
result_r_h = []
for i in range(len(u_l)):
    result_u_l.append(u_l[i] - (u_l_18[i] + u_l_19[i])/2)
    result_u_m.append(u_m[i] - (u_m_18[i] + u_m_19[i])/2)
    result_u_h.append(u_h[i] - (u_h_18[i] + u_h_19[i])/2)
    result_s_l.append(s_l[i] - (s_l_18[i] + s_l_19[i])/2)
    result_s_m.append(s_m[i] - (s_m_18[i] + s_m_19[i])/2)
    result_s_h.append(s_h[i] - (s_h_18[i] + s_h_19[i])/2)
    result_r_l.append(r_l[i] - (r_l_18[i] + r_l_19[i])/2)
    result_r_m.append(r_m[i] - (r_m_18[i] + r_m_19[i])/2)
    result_r_h.append(r_h[i] - (r_h_18[i] + r_h_19[i])/2)

plt.plot(dates, result_r_l, label="Low Covid")
plt.plot(dates, result_r_m, label="Medium Covid")
plt.plot(dates, result_r_h, label="High Covid")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Change in Sum of Lights')
plt.title('Change in Sum of Lights Between 2018-2019 and 2020 for Rural Counties Based on Covid Levels')
plt.show()

plt.plot(dates, result_s_l, label="Low Covid")
plt.plot(dates, result_s_m, label="Medium Covid")
plt.plot(dates, result_s_h, label="High Covid")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Change in Sum of Lights')
plt.title('Change in Sum of Lights Between 2018-2019 and 2020 for Semi-Urban Counties Based on Covid Levels')
plt.show()

plt.plot(dates, result_u_l, label="Low Covid")
plt.plot(dates, result_u_m, label="Medium Covid")
plt.plot(dates, result_u_h, label="High Covid")
plt.legend()
plt.tick_params(axis='x', labelrotation=90)
plt.xlabel('Date')
plt.ylabel('Change in Sum of Lights')
plt.title('Change in Sum of Lights Between 2018-2019 and 2020 for Urban Counties Based on Covid Levels')
plt.show()

dates = sorted(set(data['Date'].tolist()))

u_l_18 = []
u_m_18 = []
u_h_18 = []
s_l_18 = []
s_m_18 = []
s_h_18 = []
r_l_18 = []
r_m_18 = []
r_h_18 = []
u_l_19 = []
u_m_19 = []
u_h_19 = []
s_l_19 = []
s_m_19 = []
s_h_19 = []
r_l_19 = []
r_m_19 = []
r_h_19 = []
u_l = []
u_m = []
u_h = []
s_l = []
s_m = []
s_h = []
r_l = []
r_m = []
r_h = []

# split into datasets for counties that are urban, semi-urban, and rural
s = data["Population"]
pop_cutoffs = s.quantile([float(1/3), float(2/3)])
data_rural = data[(data["Population"] <= pop_cutoffs[float(1/3)])]
data_semi = data[(data["Population"] > pop_cutoffs[float(1/3)]) & (data["Population"] <= pop_cutoffs[float(2/3)])]
data_urban = data[(data["Population"] > pop_cutoffs[float(2/3)])]

# classify by covid level in each month
for date in dates:

  # rural counties
  temp_data = data_rural[data_rural["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  r_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  r_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  r_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  r_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  r_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  # semi-urban counties
  temp_data = data_semi[data_semi["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  s_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  s_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  s_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  s_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  s_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  # urban counties
  temp_data = data_urban[data_urban["Date"] == date]
  month = temp_data["Month"].tolist()[0]
  s = temp_data["New_Cases"]
  cutoffs = s.quantile([float(1/3), float(2/3)])

  data_low = temp_data[(temp_data["New_Cases"] <= cutoffs[float(1/3)])]
  u_l.append(sum(data_low["NTL_SOL"].tolist()))
  counties = data_low["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_l_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_l_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_med = temp_data[(temp_data["New_Cases"] > cutoffs[float(1/3)]) & (temp_data["New_Cases"] <= cutoffs[float(2/3)])]
  u_m.append(sum(data_med["NTL_SOL"].tolist()))
  counties = data_med["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_m_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_m_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

  data_high = temp_data[(temp_data["New_Cases"] > cutoffs[float(2/3)])]
  u_h.append(sum(data_high["NTL_SOL"].tolist()))
  counties = data_high["FIPS"].tolist()
  past_temp = past_data[(past_data["FIPS"].isin(counties)) & (past_data["Month"] == month)]
  temp_18 = past_temp[past_temp["Year"] == 2018]
  temp_19 = past_temp[past_temp["Year"] == 2019]
  u_h_18.append(sum(temp_18["Sum_of_Lights"].tolist()))
  u_h_19.append(sum(temp_19["Sum_of_Lights"].tolist()))

result_u_l = []
result_u_m = []
result_u_h = []
result_s_l = []
result_s_m = []
result_s_h = []
result_r_l = []
result_r_m = []
result_r_h = []
for i in range(len(u_l)):
    result_u_l.append(u_l[i] - (u_l_18[i] + u_l_19[i])/2)
    result_u_m.append(u_m[i] - (u_m_18[i] + u_m_19[i])/2)
    result_u_h.append(u_h[i] - (u_h_18[i] + u_h_19[i])/2)
    result_s_l.append(s_l[i] - (s_l_18[i] + s_l_19[i])/2)
    result_s_m.append(s_m[i] - (s_m_18[i] + s_m_19[i])/2)
    result_s_h.append(s_h[i] - (s_h_18[i] + s_h_19[i])/2)
    result_r_l.append(r_l[i] - (r_l_18[i] + r_l_19[i])/2)
    result_r_m.append(r_m[i] - (r_m_18[i] + r_m_19[i])/2)
    result_r_h.append(r_h[i] - (r_h_18[i] + r_h_19[i])/2)

range_u = []
range_s = []
range_r = []
for i in range(len(result_u_h)):
  range_u.append(result_u_h[i] - result_u_l[i])
  range_s.append(result_s_h[i] - result_s_l[i])
  range_r.append(result_r_h[i] - result_r_l[i])

fig, ax = plt.subplots(3, 2, figsize=(20,15))
fig.tight_layout()

ax[0,0].plot(dates, result_r_l, label="Low Covid")
ax[0,0].plot(dates, result_r_m, label="Medium Covid")
ax[0,0].plot(dates, result_r_h, label="High Covid")
ax[0,0].legend()
ax[0,0].xaxis.set_ticklabels([])
ax[0,0].set_ylabel('Change in Sum of Lights')
ax[0,0].set_title('Change in Sum of Lights Between 2018-2019 and 2020 for Rural Counties Based on Covid Levels')

ax[0,1].plot(dates, range_r, 'k')
ax[0,1].plot(dates, [0]*len(range_r), 'r--', label="Zero")
ax[0,1].plot(dates, [np.mean(range_r)]*len(range_r), 'm--', label="Average")
ax[0,1].legend()
ax[0,1].xaxis.set_ticklabels([])
ax[0,1].set_title('Difference Between Sum of Lights Change in High and Low Covid Counties for Rural Counties')

ax[1,0].plot(dates, result_s_l, label="Low Covid")
ax[1,0].plot(dates, result_s_m, label="Medium Covid")
ax[1,0].plot(dates, result_s_h, label="High Covid")
ax[1,0].legend()
ax[1,0].xaxis.set_ticklabels([])
ax[1,0].set_ylabel('Change in Sum of Lights')
ax[1,0].set_title('Change in Sum of Lights Between 2018-2019 and 2020 for Semi-Urban Counties Based on Covid Levels')

ax[1,1].plot(dates, range_s, 'k')
ax[1,1].plot(dates, [0]*len(range_s), 'r--', label="Zero")
ax[1,1].plot(dates, [np.mean(range_s)]*len(range_s), 'm--', label="Average")
ax[1,1].legend()
ax[1,1].xaxis.set_ticklabels([])
ax[1,1].set_title('Difference Between Sum of Lights Change in High and Low Covid Counties for Semi-Urban Counties')

ax[2,0].plot(dates, result_u_l, label="Low Covid")
ax[2,0].plot(dates, result_u_m, label="Medium Covid")
ax[2,0].plot(dates, result_u_h, label="High Covid")
ax[2,0].legend()
ax[2,0].tick_params(axis='x', labelrotation=90)
ax[2,0].set_xlabel('Date')
ax[2,0].set_ylabel('Change in Sum of Lights')
ax[2,0].set_title('Change in Sum of Lights Between 2018-2019 and 2020 for Urban Counties Based on Covid Levels')

ax[2,1].plot(dates, range_u, 'k')
ax[2,1].plot(dates, [0]*len(range_u), 'r--', label="Zero")
ax[2,1].plot(dates, [np.mean(range_u)]*len(range_u), 'm--', label="Average")
ax[2,1].legend()
ax[2,1].tick_params(axis='x', labelrotation=90)
ax[2,1].set_xlabel('Date')
ax[2,1].set_title('Difference Between Sum of Lights Change in High and Low Covid Counties for Urban Counties')

plt.show()